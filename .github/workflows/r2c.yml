name: NanoPi R2C

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'your local repo branch'
        required: true
        default: 21.02
        type: choice
        options:
        - 21.02
        - 22.03

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Clone Repository
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.branch }}

    - name: Init build dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        sudo -E docker image prune -a -f
        sudo -E snap set system refresh.retain=2
        sudo -E apt-get update -y
        sudo -E apt-get install -y build-essential rsync asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python3 python3-pip python3-ply haveged lrzsz device-tree-compiler scons
        wget -qO - https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh | sed 's/python-/python3-/g' | /bin/bash
        pip3 install pyelftools
        sudo -E apt-get -y purge azure* dotnet* firefox ghc* google* hhvm llvm* mono* mysql* openjdk* php* zulu*
        sudo -E apt-get -y autoremove --purge
        sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /etc/mysql /etc/php /usr/local/share/boost
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo -E apt-get clean -y
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h

    - name: Clone OpenWrt
      id: co
      run: |
        _LBRANCH=${{ github.event.inputs.branch }}
        _REPO_URL=https://github.com/openwrt/openwrt
        case $_LBRANCH in
          21.02)
            _RBRANCH=v${_LBRANCH}.2
            name_tag=$_RBRANCH
            prerelease=false
            ;;
          22.03)
            _RBRANCH=openwrt-$_LBRANCH
            name_tag=v${_LBRANCH}-snapshot
            prerelease=true
            ;;
          *)
            echo "Can't get local/upstream's branch/tags"
            break
            ;;
        esac
        echo ::set-output name=release_tag::$name_tag
        echo ::set-output name=release::$prerelease
        git clone -b $_RBRANCH --depth 1 --single-branch $_REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Prepare Openwrt
      run: |
        /bin/bash ./scripts/00_prepare.sh

    - name: Feeds update
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Customize Packages
      working-directory: ./openwrt
      run: |
        cp ../scripts/r2c_customization.sh .
        /bin/bash r2c_customization.sh
        cp ../scripts/01_customize_packages.sh .
        /bin/bash 01_customize_packages.sh

    - name: Convert Translation
      working-directory: ./openwrt
      run: |
        cp ../scripts/02_convert_translation.sh .
        /bin/bash 02_convert_translation.sh

    - name: Add ACL
      working-directory: ./openwrt
      run: |
        cp ../scripts/03_create_acl_for_luci.sh .
        /bin/bash 03_create_acl_for_luci.sh -a

    - name: Cache toolchain
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt

    - name: Make Config
      working-directory: ./openwrt
      run: |
        cp ../config/r2c_defconfig .config
        make defconfig

    - name: Make Download
      working-directory: ./openwrt
      run: |
        make download -j`nproc`

    - name: Compile OpenWrt
      working-directory: ./openwrt
      run: |
        make -j`nproc` || make -j1 V=s

    - name: Assemble Artifact
      run: |
        rm -rf ./artifact/
        ls openwrt/bin/targets/rockchip/armv8/
        mv openwrt/bin/targets/rockchip/armv8 ./artifact
        pushd artifact
        cat config.buildinfo
        rm -rf packages *.buildinfo *.json *.manifest sha256sums
        popd

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.co.outputs.release_tag }}
        path: artifact/*

    - name: Upload Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        draft: false
        prerelease: ${{ steps.co.outputs.release }}
        tag_name: ${{ steps.co.outputs.release_tag }}
        files: artifact/*
